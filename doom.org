#+TITLE: Doom Emacs configuration
#+AUTHOR: Md Arif shaikh
#+EMAIL: arifshaikh.astro@gmail.com
* Table Of Contents :TOC:
- [[#configurations][Configurations]]
  - [[#header][Header]]
  - [[#user-details][User details]]
  - [[#load-file-if-it-exists][Load file if it exists]]
  - [[#connect-to-remote-machines][Connect to remote machines]]
  - [[#convert-time-zone][Convert time zone]]
  - [[#dired][Dired]]
  - [[#custom-commands][Custom commands]]
  - [[#python-environment][Python environment]]
  - [[#jupyter][Jupyter]]
  - [[#start-emacs-fullscreen][Start emacs fullscreen]]
  - [[#yasnippets][Yasnippets]]
- [[#init][Init]]
  - [[#header-1][Header]]
  - [[#doom-packages][doom packages]]
- [[#package][Package]]
  - [[#header-2][header]]
  - [[#packages][packages]]

* Configurations
** Header
#+BEGIN_SRC emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

** User details
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq user-full-name "Md Arif Shaikh"
      user-mail-address "arifshaikh.astro@gmail.com")
#+END_SRC
** Load file if it exists
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun arif/load-file (file-name)
  (if (file-exists-p file-name)
      (load-file file-name)
    (message (format "%s file not found" file-name))))
#+END_SRC
** Connect to remote machines
#+BEGIN_SRC emacs-lisp :tangle config.el
(arif/load-file "~/.config/emacs/remote-machines.el")
(defun arif/connect-remote-dir (remote-machine-name)
  "Connect to REMOTE-MACHINE-NAME."
  (interactive "sRemote Machine Name: ")
  (let ((remote-user-name (cdr (assoc remote-machine-name remote-user-names))))
    (set-buffer (dired (format "/sshx:%s:/home/%s/" remote-machine-name remote-user-name))))
  )

(defun arif/connect-remote-term (remote-machine-name)
  "Connect to terminal in on REMOTE-MACHINE-NAME."
  (interactive "sRemote Machine Name: ")
  (let* ((remote-shell-types '(("comet" . "/bin/bash")
			       ("dodo" . "/bin/zsh")))
	 (default-directory ( format "/sshx:%s:" remote-machine-name))
	 (remote-shell-name  (cdr (assoc remote-machine-name remote-shell-types))))
    (shell remote-shell-name)))

(global-set-key (kbd "C-c r d") #'arif/connect-remote-dir)
(global-set-key (kbd "C-c r s") #'arif/connect-remote-term)
#+END_SRC
** Convert time zone
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun arif/convert-time (from-zone to-zone time-to-convert)
  "Convert TIME from FROM-ZONE to TO-ZONE."
  (interactive "sFrom which timezone (use abbreviation, e.g., EST for Eeastern Standard Time):
sTo which timezone (use abbreviation, e.g., IST for Indian Standard Time):
sTime to be converted (HH:MM PM/pm(optional) DAY(optional)): ")
  (let* ((time-zones '(("EST" . "-0500")
		       ("CST" . "-0600")
		       ("CDT" . "-0500")
		       ("EET" . "+0200")
		       ("CET" . "+0100")
		       ("IST" . "+0530")
		       ("KOLKATA" . "+0530")
		       ("JST" . "+0900")
		       ("TOKYO" . "+0900")))
	 (days '("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"))
	 (time (parse-time-string time-to-convert))
	 (from-zone-u (upcase from-zone))
	 (to-zone-u (upcase to-zone))
	 ;; (from-sec (nth 0 time))
	 (from-min (nth 1 time))
	 (from-hour (nth 2 time))
	 (from-day (nth 6 time)))
    (when (string-match-p (regexp-quote "PM") (upcase time-to-convert))
      (setq  from-hour (+ 12 from-hour)))
    (let* ((time-shift (- (nth 8 (parse-time-string (cdr (assoc to-zone-u time-zones))))
			  (nth 8 (parse-time-string (cdr (assoc from-zone-u time-zones))))))
	   (hour-shift (/ time-shift (* 60 60)))
	   (min-shift (/ (% time-shift (* 60 60)) 60))
	   (to-min (+ from-min min-shift))
	   (to-hour (+ from-hour hour-shift))
	   (to-day-name ""))
      (when (>= to-min 60)
	(setq to-min (- to-min 60))
	(setq to-hour (1+ to-hour)))
      (cond ((>= to-hour 24) (progn
			       (setq to-hour (- to-hour 24))
			       (if (not (equal from-day nil))
				   (setq to-day-name (nth (1+ from-day) days))
				 (setq to-day-name "+ 1 day"))))
	    ((< to-hour 0) (progn
			     (setq to-hour (+ 24 to-hour))
			     (if (not (equal from-day nil))
				 (setq to-day-name (nth (1- from-day) days))
			       (setq to-day-name "- 1 day"))))
	    ((and (> to-hour 0) (< to-hour 24)) (if (not (equal from-day nil))
						    (setq to-day-name (nth from-day days))
						  (setq to-day-name ""))))
      (cond ((= to-hour 0) (setq A-or-P "Midnight"))
	    ((< to-hour 12) (setq A-or-P "AM"))
	    ((= to-hour 12) (setq A-or-P "Noon"))
	    ((> to-hour 12) (progn
			      (setq to-hour (- to-hour 12))
			      (setq A-or-P "PM"))))
      (message (format "%s %s = %.2d:%.2d %s %s %s" (upcase time-to-convert) from-zone-u to-hour to-min (upcase A-or-P) (upcase to-day-name) to-zone-u)))))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package! dired-x
  :after (dired)
  :config
  (setq dired-omit-verbose nil
        dired-omit-files
        (concat dired-omit-files "\\|^\\..+$"))
  (add-hook 'dired-mode-hook #'dired-omit-mode)
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
#+END_SRC
** Custom commands
#+BEGIN_SRC emacs-lisp :tangle config.el
(arif/load-file "~/.config/emacs/custom-commands.el")
#+END_SRC
** Python environment
#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package! pyvenv
  :defer
  :config
  (if (eq system-type 'darwin)
      (setenv "WORKON_HOME" "/Users/arif/miniconda3/envs/")
    (setenv "WORKON_HOME" "/home/arif/anaconda3/envs/"))
  (pyvenv-mode 1)
  (pyvenv-tracking-mode 1))
#+END_SRC
** Jupyter
#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package! jupyter
  :defer)
#+END_SRC

** Start emacs fullscreen
#+BEGIN_SRC emacs-lisp :tangle config.el
(add-to-list 'default-frame-alist '(fullscreen . fullboth))
#+END_SRC
** Yasnippets
#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package! yasnippet
  :config
  (setq yas-snippet-dirs '("~/.doom.d/snippets")))

(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

(defun arif/latex-greek-symbols (english-symbol)
  (interactive)
  (let ((arif/greek-symbols '(("a" . "\\alpha")
			     ("b" . "\\beta")
			     ("c" . "\\chi")
			     ("d" . "\\delta")
			     ("D" . "\\Delta")
			     ("e" . "\\epsilon")
			     ("f" . "\\phi")
			     ("F" . "\\Phi")
			     ("g" . "\\gamma")
			     ("G" . "\\Gamma")
			     ("i" . "\\iota")
			     ("k" . "\\kappa")
			     ("l" . "\\lambda")
			     ("L" . "\\Lambda")
			     ("m" . "\\mu")
			     ("n" . "\\nu")
			     ("o" . "\\omega")
			     ("O" . "\\Omega")
			     ("p" . "\\pi")
			     ("P" . "\\Pi")
			     ("r" . "\\rho")
			     ("s" . "\\sigma")
			     ("t" . "\\tau")
			     ("x" . "\\xi")
			     ("ve" . "\\varepsilon")
			     ("vp" . "\\varphi"))))
  (cdr (assoc english-symbol arif/greek-symbols)))
  )
#+END_SRC
*** Environments
Keys for environments starts with ~e~ and then the first two alphabets of the environment name.
|-------------+-----|
| Environment | Key |
|-------------+-----|
| Equation    | eeq |
|-------------+-----|
| Enumerate   | een |
|-------------+-----|
| Itemize     | eit |
|-------------+-----|
| Align       | eal |
|-------------+-----|
*** Text
Keys for texts starts with ~@~ and then first alphabet of the desired face/shape
| Text      | Key |
|-----------+-----|
| Bold      | @b  |
|-----------+-----|
| Italic    | @i  |
|-----------+-----|
| Underline | @u  |
|-----------+-----|
*** Greek symbols
Keys for greek symbols works a little bit differently. First we hit ~@ + TAB~ then enter equivalent english alphabet.
For example ~@ + TAB + a~ will give ~\alpha~.

* Init
** Header
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+END_SRC
** doom packages
#+BEGIN_SRC emacs-lisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       ;;(evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired            ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+END_SRC
* Package
** header
#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+END_SRC
** packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! jupyter)
#+END_SRC
